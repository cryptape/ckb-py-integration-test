import time

import requests

import json


class FiberRPCClient:
    def __init__(self, url):
        self.url = url

    def send_btc(self, btc_pay_req):
        return self.call("send_btc", [btc_pay_req])

    def open_channel(self, param):
        """
        curl --location 'http://127.0.0.1:8227' --header 'Content-Type: application/json' --data '{
            "id": 42,
            "jsonrpc": "2.0",
            "method": "open_channel",
            "params": [
                {
                    "peer_id": "QmaQSn11jsAXWLhjHtZ9EVbauD88sCmYzty3GmYcoVWP2j",
                    "funding_amount": "0x2e90edd000"
                }
            ]
        }'
        {"jsonrpc": "2.0", "result": {"temporary_channel_id": "0xbf1b507e730b08024180ed9cb5bb3655606d3a89e94476033cf34d206d352751"}, "id": 42}
        """
        return self.call("open_channel", [param])

    def list_channels(self, param):
        """
        curl --location 'http://127.0.0.1:8227' --header 'Content-Type: application/json' --data '{
            "id": 42,
            "jsonrpc": "2.0",
            "method": "list_channels",
            "params": [
                {
                    "peer_id": "QmaQSn11jsAXWLhjHtZ9EVbauD88sCmYzty3GmYcoVWP2j"
                }
            ]
        }'
        {"jsonrpc": "2.0", "result": {"channels": [{"channel_id": "0x2329a1ced09d0c9eff46068ac939596bb657a984b1d6385db563f2de837b8879", "peer_id": "QmaQSn11jsAXWLhjHtZ9EVbauD88sCmYzty3GmYcoVWP2j", "state": {"state_name": "NEGOTIATING_FUNDING", "state_flags": "OUR_INIT_SENT | THEIR_INIT_SENT"}, "local_balance": "0x2d1f615200", "sent_tlc_balance": "0x0", "remote_balance": "0x0", "received_tlc_balance": "0x0", "created_at": "0x620a0b7b1676b"}]}, "id": 42}
        """
        return self.call("list_channels", [param])

    def accept_channel(self, param):
        return self.call("accept_channel", [param])

    def add_tlc(self, param):
        return self.call("add_tlc", [param])

    def remove_tlc(self, param):
        return self.call("remove_tlc", [param])

    def shutdown_channel(self, param):
        return self.call("shutdown_channel", [param])

    def new_invoice(self, param):
        """
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        Args:
            param:

        Returns:

        """
        return self.call("new_invoice", [param])

    def parse_invoice(self, param):
        return self.call("parse_invoice", [param])

    def connect_peer(self, param):
        return self.call("connect_peer", [param])

    def cancel_invoice(self, param):
        return self.call("cancel_invoice", [param])

    def get_invoice(self, param):
        """
        curl --location 'http://127.0.0.1:8228' --header 'Content-Type: application/json' --data '{
            "id": 42,
            "jsonrpc": "2.0",
            "method": "get_invoice",
            "params": [
                {
                    "payment_hash": "0x08f64fbcb38189aedb109ff049b6c8a20ba9b61a836fef35a6699c2004fe6902"
                }
            ]
        }'
        response:
        {"jsonrpc": "2.0", "result": {"invoice_address": "fibd11peseucdphcxgfw0pnm6vktap96klrlajceukj0q8wrshgjsryppgqzusjgf4ex560xfzxrj0et3hnws4zlgf3lly8csvwz2t4a6h7wap50qxf2mx4xw585ze4497k48f9y4g7rzg6h2gla7evwzu296y20t8jlwl0rjutcteyhyp6ymt4lfzyjf8k22l0q8gqnwm87jrj5knq45dqlw6yxqe0tlqg8638uhq9l0nh3ejrjc03mxam88u3v6wx46dqvy7chc2p0qn3lunckjmchxk9jc48qf34jzelpksqcgtt9c0pa87xnu2kza7x6r2dyg3flp9pkg6wsnyx54lrlqh0mnlafcqs2scnz7gqh8xyxs", "invoice": {"currency": "Fibd", "amount": "0x1", "signature": "0c041e1817180a010f0013111f1c131816121b181706160512181507000911151202191f0116100018080b0b05180f011d071e06131c0a16021d1e061a030a0d040811091f01050116081a0e1013040614151f031f00170f1b131f1d091800100a101813021e0800", "data": {"timestamp": "0x193287ae635", "payment_hash": "0x08f64fbcb38189aedb109ff049b6c8a20ba9b61a836fef35a6699c2004fe6902", "attrs": [{"Description": "test invoice generated by node2"}, {"ExpiryTime": {"secs": 3600, "nanos": 0}}, {"HashAlgorithm": "sha256"}, {"PayeePublicKey": "0299cbc950e551a2dc509000d801d768e714bf9bcfb11dde976e314bb1bb5c1af9"}]}}, "status": "Cancelled"}, "id": 42}
        """
        return self.call("get_invoice", [param])

    def disconnect_peer(self, param):
        return self.call("disconnect_peer", [param])

    def send_payment(self, param):
        return self.call("send_payment", [param])

    def get_payment(self, param):
        """
        curl --location 'http://127.0.0.1:8228' --header 'Content-Type: application/json' --data '{
            "id": 42,
            "jsonrpc": "2.0",
            "method": "get_payment",
            "params": [
                {
                    "payment_hash": "0x03f43a02479d6901b53f88a4fa8a550786b1dad78d1bdb165a8afc8d19e89ffb"
                }
            ]
        }'
        {"jsonrpc": "2.0", "result": {"payment_hash": "0x03f43a02479d6901b53f88a4fa8a550786b1dad78d1bdb165a8afc8d19e89ffb", "status": "Success", "created_at": "0x192d868eaae", "last_updated_at": "0x6259d59d61040", "failed_error": null}, "id": 42}

        Args:
            param:

        Returns:

        """
        return self.call("get_payment", [param])

    def node_info(self):
        return self.call("node_info", [{}])

    def graph_nodes(self):
        return self.call("graph_nodes", [{}])

    def graph_channels(self):
        return self.call("graph_channels", [{}])

    def call(self, method, params):
        headers = {"content-type": "application/json"}
        data = {"id": 42, "jsonrpc": "2.0", "method": method, "params": params}
        print(
            "curl --location '{url}' --header 'Content-Type: application/json' --data '{data}'".format(
                url=self.url, data=json.dumps(data, indent=4)
            )
        )
        for i in range(100):
            try:
                response = requests.post(
                    self.url, data=json.dumps(data), headers=headers
                ).json()
                print("response:\n{response}".format(response=json.dumps(response)))
                if "error" in response.keys():
                    error_message = response["error"].get("message", "Unknown error")
                    raise Exception(f"Error: {error_message}")

                return response.get("result", None)
            except requests.exceptions.ConnectionError as e:
                print(e)
                print("request too quickly, wait 2s")
                time.sleep(2)
                continue
        raise Exception("request time out")
