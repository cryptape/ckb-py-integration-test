import time

import pytest

from framework.basic_fiber import FiberTest


class TestTlcFeeProportionalMillionths(FiberTest):

    def test_tlc_fee_proportional_millionths_default(self):
        """

        tlc_fee_proportional_millionths : none
        Returns:
        """
        account3_private_key = self.generate_account(1000)
        new_fiber = self.start_new_fiber(account3_private_key)
        time.sleep(3)
        self.fiber2.connect_peer(new_fiber)
        time.sleep(3)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                # "funding_fee_rate": "0xffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        temporary_channel_id = self.fiber2.get_client().open_channel(
            {
                "peer_id": new_fiber.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                # "tlc_min_value": hex(2 * 100000000)
                # "funding_fee_rate": "0xffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber2.get_client(), new_fiber.get_peer_id(), "CHANNEL_READY", 120
        )
        invoice_balance = hex(100 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = new_fiber.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel_12 = self.fiber1.get_client().list_channels({})
        before_channel_32 = new_fiber.get_client().list_channels({})
        time.sleep(10)
        self.fiber2.get_client().graph_channels()
        self.fiber2.get_client().graph_nodes()
        self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        time.sleep(10)
        after_channel_12 = self.fiber1.get_client().list_channels({})
        after_channel_32 = new_fiber.get_client().list_channels({})

        print("before_channel_12:", before_channel_12)
        print("before_channel_32:", before_channel_32)
        print("after_channel_12:", after_channel_12)
        print("after_channel_32:", after_channel_32)

        assert int(before_channel_12["channels"][0]["local_balance"], 16) - int(
            after_channel_12["channels"][0]["local_balance"], 16
        ) == (int(invoice_balance, 16) + int(int(invoice_balance, 16) * 0.001))

        assert int(after_channel_32["channels"][0]["local_balance"], 16) - int(
            before_channel_32["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)

    def test_tlc_fee_proportional_millionths_overflow(self):
        """
        tlc_fee_proportional_millionths > int.max
        Returns:
        """
        with pytest.raises(Exception) as exc_info:
            temporary_channel_id = self.fiber2.get_client().open_channel(
                {
                    "peer_id": self.fiber1.get_peer_id(),
                    "funding_amount": hex(1000 * 100000000),
                    "public": True,
                    # "tlc_min_value": hex(2 * 100000000)
                    # "funding_fee_rate": "0xffff",
                    "tlc_fee_proportional_millionths": "0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
                }
            )
        expected_error_message = "Invalid params"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_ckb_tlc_fee_proportional_millionths_not_eq_default(self):
        """
        tlc_fee_proportional_millionths != default
        Returns:
        """
        account3_private_key = self.generate_account(1000)
        new_fiber = self.start_new_fiber(account3_private_key)
        time.sleep(3)
        self.fiber2.connect_peer(new_fiber)

        # self.fiber3.connect_peer(self.fiber2)
        time.sleep(3)
        self.fiber2.connect_peer(self.fiber3)
        time.sleep(3)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                # "funding_fee_rate": "0xffff",
                "tlc_fee_proportional_millionths": hex(1000000),
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        fiber2_tlc_fee = 1000000
        temporary_channel_id = self.fiber2.get_client().open_channel(
            {
                "peer_id": new_fiber.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "tlc_fee_proportional_millionths": hex(fiber2_tlc_fee),
                # "tlc_min_value": hex(2 * 100000000)
                # "funding_fee_rate": "0xffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber2.get_client(), self.fiber3.get_peer_id(), "CHANNEL_READY", 120
        )
        invoice_balance = hex(100 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = new_fiber.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel_12 = self.fiber1.get_client().list_channels({})
        before_channel_32 = new_fiber.get_client().list_channels({})
        time.sleep(10)
        self.fiber2.get_client().graph_channels()
        self.fiber2.get_client().graph_nodes()
        self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        time.sleep(10)
        after_channel_12 = self.fiber1.get_client().list_channels({})
        after_channel_32 = new_fiber.get_client().list_channels({})

        print("before_channel_12:", before_channel_12)
        print("before_channel_32:", before_channel_32)
        print("after_channel_12:", after_channel_12)
        print("after_channel_32:", after_channel_32)

        assert int(before_channel_12["channels"][0]["local_balance"], 16) - int(
            after_channel_12["channels"][0]["local_balance"], 16
        ) == (int(invoice_balance, 16) + int(int(invoice_balance, 16) * 0.001))

        assert int(after_channel_32["channels"][0]["local_balance"], 16) - int(
            before_channel_32["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)
        invoice_balance = hex(1 * 1000000)
        invoice = self.fiber1.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        time.sleep(1)
        payment = new_fiber.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
                "max_fee_amount": hex(1000 * 100000000),
            }
        )
        time.sleep(5)
        new_fiber.get_client().get_payment({"payment_hash": payment["payment_hash"]})
        after_channel_2_12 = self.fiber1.get_client().list_channels({})
        after_channel_2_32 = new_fiber.get_client().list_channels({})
        new_fiber.get_client().graph_nodes()
        print("after_channel_2_12:", after_channel_2_12)
        print("after_channel_2_12:", after_channel_2_32)
        # assert
        assert (
            int(after_channel_32["channels"][0]["local_balance"], 16)
            - int(after_channel_2_32["channels"][0]["local_balance"], 16)
            == int(invoice_balance, 16)
            + int(invoice_balance, 16) * fiber2_tlc_fee / 1000000
        )

        assert int(after_channel_2_12["channels"][0]["local_balance"], 16) - int(
            after_channel_12["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)

    def test_udt_tlc_fee_proportional_millionths_not_eq_default(self):
        """
        tlc_fee_proportional_millionths != default
        Returns:
        """

        account3_private_key = self.generate_account(
            1000, self.Config.ACCOUNT_PRIVATE_1, 1000 * 100000000
        )
        new_fiber = self.start_new_fiber(account3_private_key)
        time.sleep(3)
        self.fiber2.connect_peer(new_fiber)

        account1_cells = self.udtContract.list_cell(
            self.node.getClient(), self.account1["lock_arg"], self.account1["lock_arg"]
        )
        account2_cells = self.udtContract.list_cell(
            self.node.getClient(), self.account1["lock_arg"], self.account2["lock_arg"]
        )
        print("account1:", account1_cells)
        print("account2:", account2_cells)
        tx_hash = self.Ckb_cli.wallet_transfer_by_private_key(
            self.Config.ACCOUNT_PRIVATE_2,
            self.account1["address"]["testnet"],
            10000,
            self.node.rpcUrl,
        )
        self.Miner.miner_until_tx_committed(self.node, tx_hash)

        time.sleep(3)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                # "funding_fee_rate": "0xffff",
                "tlc_fee_proportional_millionths": hex(1000000),
                "funding_udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        self.account1["lock_arg"]
                    ),
                },
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        fiber2_tlc_fee = 1000000
        temporary_channel_id = self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "tlc_fee_proportional_millionths": hex(fiber2_tlc_fee),
                "funding_udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        self.account1["lock_arg"]
                    ),
                },
                # "tlc_min_value": hex(2 * 100000000)
                # "funding_fee_rate": "0xffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber2.get_client(), self.fiber3.get_peer_id(), "CHANNEL_READY", 120
        )
        invoice_balance = hex(100 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = new_fiber.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        self.account1["lock_arg"]
                    ),
                },
            }
        )
        before_channel_12 = self.fiber1.get_client().list_channels({})
        before_channel_32 = new_fiber.get_client().list_channels({})
        time.sleep(10)
        self.fiber2.get_client().graph_channels()
        self.fiber2.get_client().graph_nodes()
        self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        time.sleep(10)
        after_channel_12 = self.fiber1.get_client().list_channels({})
        after_channel_32 = new_fiber.get_client().list_channels({})

        print("before_channel_12:", before_channel_12)
        print("before_channel_32:", before_channel_32)
        print("after_channel_12:", after_channel_12)
        print("after_channel_32:", after_channel_32)

        assert int(before_channel_12["channels"][0]["local_balance"], 16) - int(
            after_channel_12["channels"][0]["local_balance"], 16
        ) == (int(invoice_balance, 16) + int(int(invoice_balance, 16) * 0.001))

        assert int(after_channel_32["channels"][0]["local_balance"], 16) - int(
            before_channel_32["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)
        invoice_balance = hex(1 * 100000000)
        invoice = self.fiber1.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        self.account1["lock_arg"]
                    ),
                },
            }
        )
        time.sleep(1)
        payment = new_fiber.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
                "max_fee_amount": hex(1000 * 100000000),
            }
        )
        time.sleep(5)
        new_fiber.get_client().get_payment({"payment_hash": payment["payment_hash"]})
        after_channel_2_12 = self.fiber1.get_client().list_channels({})
        after_channel_2_32 = new_fiber.get_client().list_channels({})
        new_fiber.get_client().graph_nodes()
        print("after_channel_2_12:", after_channel_2_12)
        print("after_channel_2_12:", after_channel_2_32)
        # assert
        assert (
            int(after_channel_32["channels"][0]["local_balance"], 16)
            - int(after_channel_2_32["channels"][0]["local_balance"], 16)
            == int(invoice_balance, 16)
            + int(invoice_balance, 16) * fiber2_tlc_fee / 1000000
        )

        assert int(after_channel_2_12["channels"][0]["local_balance"], 16) - int(
            after_channel_12["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)
