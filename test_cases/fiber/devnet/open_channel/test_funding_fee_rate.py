import time

import pytest

from framework.basic_fiber import FiberTest


class TestFundingFeeRate(FiberTest):

    @pytest.mark.skip("todo")
    def test_funding_fee_rate_none(self):
        """
        funding_fee_rate is none
        Returns:
        """
        # self.test_linked_peer()

    def test_funding_fee_rate_too_min(self):
        """
        funding_fee_rate = 1
        Returns:
        """

        with pytest.raises(Exception) as exc_info:
            temporary_channel_id = self.fiber1.get_client().open_channel(
                {
                    "peer_id": self.fiber2.get_peer_id(),
                    "funding_amount": hex(200 * 100000000),
                    "public": True,
                    "funding_fee_rate": hex(1),
                    # "tlc_fee_proportional_millionths": "0x4B0",
                }
            )
        expected_error_message = "Funding fee rate is less than 1000"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_funding_fee_rate_too_big(self):
        """
        funding_fee_rate  == int.max
        Returns:
        """

        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                "funding_fee_rate": "0xffffffffffffffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        tx_hash = self.wait_and_check_tx_pool_fee(int("0xffffffffffffffff", 16), False)
        tx_message = self.get_tx_message(tx_hash)
        print(tx_message)
        return

        # self.wait_and_check_tx_pool_fee(int("0xffffffffffffffff", 16))
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        time.sleep(5)
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        time.sleep(10)
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        before_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": {
                    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                    "hash_type": "type",
                    "args": self.account1["lock_arg"],
                },
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close tx commit
        time.sleep(20)
        after_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        after_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
        print("before_balance2:", before_balance2)
        print("after_balance1:", after_balance1)
        print("after_balance2:", after_balance2)
        assert after_balance2 - before_balance2 == 162

    def test_funding_fee_rate_over_flow(self):
        """
        funding_fee_rate > int.max
        Returns:
        """
        self.fiber1.connect_peer(self.fiber2)
        time.sleep(5)
        with pytest.raises(Exception) as exc_info:
            temporary_channel_id = self.fiber1.get_client().open_channel(
                {
                    "peer_id": self.fiber2.get_peer_id(),
                    "funding_amount": hex(200 * 100000000),
                    "public": True,
                    "funding_fee_rate": "0xfffffffffffffffffffffffff",
                    # "tlc_fee_proportional_millionths": "0x4B0",
                }
            )
        expected_error_message = "Invalid params"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_funding_fee_rate_not_eq_default(self):
        """
        funding_fee_rate != default value
        Returns:
        """
        self.fiber1.connect_peer(self.fiber2)
        time.sleep(5)
        funding_fee_rate = 2000
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                "funding_fee_rate": hex(funding_fee_rate),
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        # todo fee 结果不准确
        # self.wait_and_check_tx_pool_fee(funding_fee_rate)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        time.sleep(5)
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        time.sleep(10)
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        before_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": {
                    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                    "hash_type": "type",
                    "args": self.account1["lock_arg"],
                },
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close tx commit
        time.sleep(20)
        after_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        after_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
        print("before_balance2:", before_balance2)
        print("after_balance1:", after_balance1)
        print("after_balance2:", after_balance2)
        assert after_balance2 - before_balance2 == 162

    @pytest.mark.skip("https://github.com/nervosnetwork/fiber/issues/276")
    def test_ckb_check_funding_fee_rate(self):
        funding_fee_rate = 2000
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                "funding_fee_rate": hex(funding_fee_rate),
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        # todo fee 结果不准确
        self.wait_and_check_tx_pool_fee(funding_fee_rate)

    def test_funding_fee_rate_gt_balance(self):
        """
        todo: 需要失败的状态
        Returns:
        """
        account3_private_key = (
            "0x200c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2b1"
        )
        account3 = self.Ckb_cli.util_key_info_by_private_key(account3_private_key)
        tx_hash = self.Ckb_cli.wallet_transfer_by_private_key(
            self.Config.ACCOUNT_PRIVATE_1,
            account3["address"]["testnet"],
            1000,
            self.node.rpcUrl,
        )
        self.Miner.miner_until_tx_committed(self.node, tx_hash)
        account3_private_key = self.generate_account(1000)
        fiber = self.start_new_fiber(account3_private_key)

        fiber.connect_peer(self.fiber2)
        time.sleep(3)
        fiber.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(990 * 100000000),
                "public": True,
                "funding_fee_rate": "0xffffffffff",
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        channels = fiber.get_client().list_channels({})
        assert channels["channels"] == []
        # self.wait_for_channel_state(
        #     fiber.get_client(), self.fiber2.get_peer_id(), "NEGOTIATING_FUNDING", 120
        # )
