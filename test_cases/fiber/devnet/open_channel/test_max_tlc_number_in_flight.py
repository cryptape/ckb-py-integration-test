import time

from framework.basic_fiber import FiberTest


class TestMaxTlcNumberInFlight(FiberTest):
    def test_max_tlc_number_in_flight_none(self):
        """
        max_tlc_number_in_flight == none
        Returns:
        """
        # self.test_linked_peer()

    def test_max_tlc_number_in_flight_zero(self):
        """
        max_tlc_number_in_flight = 0
        Returns:
        """

        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                "max_tlc_number_in_flight": "0x0",
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        time.sleep(5)
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        with pytest.raises(Exception) as exc_info:
            self.fiber1.get_client().send_payment(
                {
                    "invoice": invoice["invoice_address"],
                }
            )
        expected_error_message = "TemporaryChannelFailure"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        before_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": {
                    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                    "hash_type": "type",
                    "args": self.account1["lock_arg"],
                },
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close tx commit
        time.sleep(20)
        after_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        after_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
        print("before_balance2:", before_balance2)
        print("after_balance1:", after_balance1)
        print("after_balance2:", after_balance2)
        assert after_balance2 - before_balance2 == 62

    def test_max_tlc_number_in_flight_not_eq_default(self):
        """
        max_tlc_number_in_flight != default
        Returns:
        """
        # max_tlc_number_in_flight_num = 15
        self.fiber1.connect_peer(self.fiber2)
        time.sleep(5)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                "max_tlc_number_in_flight": hex(16),
            }
        )
        time.sleep(1)
        wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        time.sleep(5)
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        channel_id = self.fiber1.get_client().list_channels({})["channels"][0][
            "channel_id"
        ]
        invoice_balance = 1 * 100000000
        invoice_list = []
        payment_preimage_list = []
        add_tlc_list = []
        remove_tlc_list = []
        invoice_count = 16
        for i in range(invoice_count):
            print("current :", i)
            payment_preimage = generate_random_preimage()
            add_tlc = self.fiber1.get_client().add_tlc(
                {
                    "channel_id": channel_id,
                    "amount": hex(100),
                    # "payment_hash": invoice_list[i]['invoice']['data']['payment_hash'],
                    "payment_hash": payment_preimage,
                    "expiry": 400,
                    "hash_algorithm": "sha256",
                }
            )
            add_tlc_list.append(add_tlc)
            # time.sleep(0.5)
        time.sleep(10)
        with pytest.raises(Exception) as exc_info:
            payment_preimage = generate_random_preimage()
            self.fiber1.get_client().add_tlc(
                {
                    "channel_id": channel_id,
                    "amount": hex(100),
                    # "payment_hash": invoice_list[i]['invoice']['data']['payment_hash'],
                    "payment_hash": payment_preimage,
                    "expiry": 400,
                    "hash_algorithm": "sha256",
                }
            )
        expected_error_message = "TlcErrPacket"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )
        self.fiber1.get_client().list_channels({})
        self.fiber2.get_client().list_channels({})
