import time

from framework.basic_fiber import FiberTest

# from test_cases.fiber.devnet.open_channel.test_linked import LinkedTest


class TestFundingUdtTypeScript(FiberTest):
    # FiberTest.debug = True

    def test_funding_udt_type_script_is_empty(self):
        """
        1. funding_udt_type_script is none
            默认为 ckb
        Returns:
        """
        # LinkedTest().test_linked_peer()

    def test_funding_udt_type_script_not_exist_in_node1(self):
        """
        1. udt script 不在自己节点
        Returns:
        """

    def test_funding_udt_type_script_not_exist_in_node2(self):
        """
        1. udt script 不在对方节点
        Returns:
        """

    def test_funding_udt_type_script_is_white(self):
        """
        1. funding_udt_type_script 在节点上
        Returns:
        """
        # open chanel for fiber
        account = self.Ckb_cli.util_key_info_by_private_key(
            self.Config.ACCOUNT_PRIVATE_1
        )
        account2 = self.Ckb_cli.util_key_info_by_private_key(
            self.Config.ACCOUNT_PRIVATE_2
        )
        # connect  2 fiber
        self.fiber1.connect_peer(self.fiber2)
        # todo wait peer connet
        time.sleep(1)
        # open channel
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "funding_udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        account["lock_arg"]
                    ),
                },
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibb",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": {
                    "code_hash": self.udtContract.get_code_hash(True, self.node.rpcUrl),
                    "hash_type": "type",
                    "args": self.udtContract.get_owner_arg_by_lock_arg(
                        account["lock_arg"]
                    ),
                },
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")

        time.sleep(10)
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_account1 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account["lock_arg"]
        )
        before_account2 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account2["lock_arg"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": {
                    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                    "hash_type": "type",
                    "args": account["lock_arg"],
                },
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close tx commit
        time.sleep(20)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account["lock_arg"]
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account2["lock_arg"]
        )

        print(before_account1)
        assert before_account1[0]["balance"] == 0
        print(before_account2)
        assert len(before_account2) == 0
        print(after_account1)
        assert after_account1[1]["balance"] == 90000000000
        print(after_account2)
        assert after_account2[0]["balance"] == 10000000000
        before_balance1 = self.Ckb_cli.wallet_get_live_cells(
            account["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
