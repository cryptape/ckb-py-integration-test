import time

import pytest

from framework.basic_fiber import FiberTest


class TestFundingUdtTypeScript(FiberTest):

    @pytest.mark.skip("todo")
    def test_funding_udt_type_script_is_empty(self):
        """
        1. funding_udt_type_script is none
            默认为 ckb
        Returns:
        """
        # LinkedTest().test_linked_peer()

    def test_funding_udt_type_script_not_exist(self):
        """
        1. udt script 不在自己节点
            will reject and channel length == 0
        Returns:
        """
        account3_private = self.generate_account(1000)
        self.fiber3 = self.start_new_fiber(
            account3_private, {"ckb_rpc_url": self.node.getClient().url}
        )
        self.fiber3.connect_peer(self.fiber1)
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(3)
        channels = self.fiber3.get_client().list_channels({})
        assert len(channels["channels"]) == 0

        with pytest.raises(Exception) as exc_info:
            self.fiber3.get_client().open_channel(
                {
                    "peer_id": self.fiber1.get_peer_id(),
                    "funding_amount": hex(1000 * 100000000),
                    "public": True,
                    "funding_udt_type_script": self.get_account_udt_script(
                        self.fiber1.account_private
                    ),
                }
            )
        expected_error_message = "Invalid UDT type script"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_funding_udt_type_script_is_white(self):
        """
        1. funding_udt_type_script 在节点上
        Returns:
        """
        # open chanel for fiber
        account = self.Ckb_cli.util_key_info_by_private_key(
            self.Config.ACCOUNT_PRIVATE_1
        )
        account2 = self.Ckb_cli.util_key_info_by_private_key(
            self.Config.ACCOUNT_PRIVATE_2
        )
        # connect  2 fiber
        self.fiber1.connect_peer(self.fiber2)
        time.sleep(1)
        # open channel
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        self.fiber1.get_client().graph_channels()
        self.fiber1.get_client().graph_nodes()
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_account1 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account["lock_arg"]
        )
        before_account2 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account2["lock_arg"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.fiber1.account_private),
                "fee_rate": "0x3FC",
            }
        )
        tx_hash = self.wait_and_check_tx_pool_fee(1000, False, 100)
        self.Miner.miner_until_tx_committed(self.node, tx_hash)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account["lock_arg"]
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(), account["lock_arg"], account2["lock_arg"]
        )

        assert after_account1[-1]["balance"] == 90000000000
        assert after_account2[-1]["balance"] == 10000000000
        tx_message = self.get_tx_message(tx_hash)
        if tx_message["output_cells"][1]["udt_capacity"] == 90000000000:
            assert tx_message["output_cells"][1]["udt_capacity"] == 90000000000
            assert (
                tx_message["output_cells"][1]["args"]
                == self.fiber1.get_account()["lock_arg"]
            )
            assert tx_message["output_cells"][0]["udt_capacity"] == 10000000000
            assert (
                tx_message["output_cells"][0]["args"]
                == self.fiber2.get_account()["lock_arg"]
            )
        else:
            assert tx_message["output_cells"][0]["udt_capacity"] == 90000000000
            assert (
                tx_message["output_cells"][0]["args"]
                == self.fiber1.get_account()["lock_arg"]
            )
            assert tx_message["output_cells"][1]["udt_capacity"] == 10000000000
            assert (
                tx_message["output_cells"][1]["args"]
                == self.fiber2.get_account()["lock_arg"]
            )
