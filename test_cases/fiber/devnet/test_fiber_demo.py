import time

from framework.basic_fiber import FiberTest


class TestFiberDemo(FiberTest):
    # FiberTest.debug = True

    # clean env
    # pkill ckb
    # pkill fnn
    # rm -rf tmp

    def test_udt(self):
        """
        1. 建立 udt channel
        2. 转账
        3. close channel
        4. 检查余额
        Returns:

        """

        # open channel
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        before_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close txx commit
        time.sleep(20)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )

        assert after_account1[-1]["balance"] == 90000000000
        print(after_account2)
        assert after_account2[-1]["balance"] == 10000000000

    def test_ckb(self):
        """
        1. 建立 ckb channel
        2. 转账
        3. close channel
        4. 检查余额
        Returns:
        """

        # open channel
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            - int(after_channel["channels"][0]["local_balance"], 16)
            == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        before_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        before_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        # todo wait close tx commit
        time.sleep(20)
        after_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.fiber1.get_account()["address"]["testnet"]
        )
        after_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.fiber2.get_account()["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
        print("before_balance2:", before_balance2)
        print("after_balance1:", after_balance1)
        print("after_balance2:", after_balance2)

    def test_new_fiber_test(self):
        """
        多跳
        1-2 100 ckb
        2-3 100 ckb
        1->3 转钱

        1. 启动1个fiber3
        2. 连接fiber3 和fiber2
        3. 1 openchan 2
        4 2 open channel 3
        5. node3 new invoice
        6. node1 transfer node3
        8. query 是否成功
        9 shut down
         Returns:

        """
        # 1. 启动1个fiber3
        account3_privake_key = self.generate_account(1000)
        fiber3 = self.start_new_fiber(account3_privake_key)

        #         2. 连接fiber3 和fiber2
        fiber3.connect_peer(self.fiber2)
        time.sleep(3)
        #         3. 1 openchan 2
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        #         4 2 open channel 3
        self.fiber2.get_client().open_channel(
            {
                "peer_id": fiber3.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber2.get_client(), fiber3.get_peer_id(), "CHANNEL_READY", 120
        )
        #         5. node3 new invoice
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 100 * 100000000
        invoice = fiber3.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )

        #         6. node1 transfer node3
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        # 8. query 是否成功
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        # todo fiber3 query payment
        # self.wait_payment_state(fiber3, payment['payment_hash'], "Success")

        # check account
        channelsN12 = self.fiber1.get_client().list_channels({})
        channelsN32 = fiber3.get_client().list_channels({})
        #         9 shut down

    def test_faucet(self):
        account_private_key = self.generate_account(0)
        self.faucet(
            account_private_key, 1000, self.fiber2.account_private, 1000 * 10000000
        )

        ret = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber2.account_private)["args"],
            self.get_account_script(account_private_key)["args"],
        )

        assert ret[0]["balance"] == 10000000000
        assert ret[0]["ckb"] == 50000000000
