import time

import pytest

from framework.basic_fiber import FiberTest


class TestFundingAmount(FiberTest):
    def test_ckb_funding_amount_zero(self):
        node_info = self.fiber1.get_client().node_info()
        open_channel_auto_accept_min_ckb_funding_amount = node_info['open_channel_auto_accept_min_ckb_funding_amount']

        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(int(open_channel_auto_accept_min_ckb_funding_amount, 16) - 1),
                "public": True,
            }
        )
        time.sleep(1)
        with pytest.raises(Exception) as exc_info:
            self.fiber2.get_client().accept_channel({
                "temporary_channel_id": temporary_channel['temporary_channel_id'],
                "funding_amount": "0x0"
            })
        expected_error_message = "The funding amount should be greater than the reserved amount"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_udt_funding_amount_zero(self):
        """
        funding_amount :0x0
        Returns:
        """
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(5 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)
        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": "0x0"
        })
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 1 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
                int(before_channel["channels"][0]["local_balance"], 16)
                - int(after_channel["channels"][0]["local_balance"], 16)
                == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        before_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close txx commit
        time.sleep(20)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )

        assert after_account1[-1]["balance"] == 4 * 100000000
        print(after_account2)
        assert after_account2[-1]["balance"] == 1 * 100000000

    def test_ckb_funding_amount_eq_auto_accept_channel_ckb_funding_amount(self):
        node_info = self.fiber1.get_client().node_info()
        open_channel_auto_accept_min_ckb_funding_amount = node_info['open_channel_auto_accept_min_ckb_funding_amount']

        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(int(open_channel_auto_accept_min_ckb_funding_amount, 16) - 1),
                "public": True,
            }
        )
        time.sleep(1)
        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": node_info['auto_accept_channel_ckb_funding_amount']
        })
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 1 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
                int(before_channel["channels"][0]["local_balance"], 16)
                - int(after_channel["channels"][0]["local_balance"], 16)
                == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()
        before_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.account1["address"]["testnet"]
        )
        before_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.account2["address"]["testnet"]
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close txx commit
        time.sleep(20)
        after_balance1 = self.Ckb_cli.wallet_get_capacity(
            self.fiber1.get_account()["address"]["testnet"]
        )
        after_balance2 = self.Ckb_cli.wallet_get_capacity(
            self.fiber2.get_account()["address"]["testnet"]
        )
        print("before_balance1:", before_balance1)
        print("before_balance2:", before_balance2)
        print("after_balance1:", after_balance1)
        print("after_balance2:", after_balance2)
        assert after_balance2 - before_balance2 == 63

    def test_ckb_funding_amount_lt_account(self):
        """
        funding_amount < account
        Returns:
        """
        # self.test_ckb_funding_amount_eq_auto_accept_channel_ckb_funding_amount()

    @pytest.mark.skip(
        "dev 的fiber 在测试 accept_channel(udt>0)  的时候发现构造的交易 cellDep 只有xudt ,导致ScriptNotFound")
    def test_udt_funding_amount_lt_account(self):
        """
        udt < amount
        Returns:
        """
        self.faucet(self.fiber2.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)
        self.faucet(self.fiber1.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)

        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(5 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)
        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": hex(10000 * 100000000)
        })
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 1 * 100000000
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber1.get_client().list_channels({})

        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber1.get_client().list_channels({})
        assert (
                int(before_channel["channels"][0]["local_balance"], 16)
                - int(after_channel["channels"][0]["local_balance"], 16)
                == invoice_balance
        )

        #  transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 1000 * 100000000
        invoice = self.fiber1.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber2.get_client().list_channels({})

        payment = self.fiber2.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber2.get_client().list_channels({})
        assert (
                int(before_channel["channels"][0]["local_balance"], 16)
                - int(after_channel["channels"][0]["local_balance"], 16)
                == invoice_balance
        )

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().graph_channels()

        before_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        before_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )
        # shut down
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close txx commit
        time.sleep(20)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )

        assert after_account1[-1]["balance"] == (5 - 1 + 999) * 100000000
        print(after_account2)
        assert after_account2[-1]["balance"] == (10000 + 1 - 9999) * 100000000

    def test_ckb_funding_amount_gt_account(self):
        """
        funding_amount > account
        Returns:
        """
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(100 * 100000000),
                "public": True,
            }
        )
        time.sleep(1)
        account2_capacity = self.Ckb_cli.wallet_get_capacity(self.fiber2.get_account()["address"]["testnet"])

        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": hex((int(account2_capacity) + 1) * 100000000)
        })

        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "COLLABORATING_FUNDING_TX", 120
        )
        # 失败了, 好像不能再次accept_channel

    def test_funding_amount_over_flow(self):
        """
        funding_amount > int.max
        Returns:
        """
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(5 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)

        with pytest.raises(Exception) as exc_info:
            self.fiber2.get_client().accept_channel({
                "temporary_channel_id": temporary_channel['temporary_channel_id'],
                "funding_amount": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
            })
        expected_error_message = "Invalid params"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_udt_funding_amount_gt_account(self):
        self.faucet(self.fiber2.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(5 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)
        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": hex(100000 * 100000000 + 1)
        })
        # todo add check
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "COLLABORATING_FUNDING_TX", 120
        )

    @pytest.mark.skip(
        "dev 的fiber 在测试 accept_channel(udt>0)  的时候发现构造的交易 cellDep 只有xudt ,导致ScriptNotFound")
    def test_udt_multi_funding_amount_gt_account(self):
        self.faucet(self.fiber2.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)
        self.faucet(self.fiber2.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)
        self.faucet(self.fiber1.account_private, 1000, self.fiber1.account_private, 100000 * 100000000)
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1 * 100000000),
                "public": True,
                "funding_udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        time.sleep(1)
        self.fiber2.get_client().accept_channel({
            "temporary_channel_id": temporary_channel['temporary_channel_id'],
            "funding_amount": hex(200000 * 100000000)
        })

        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )

        #  transfer
        payment_preimage = self.generate_random_preimage()
        invoice_balance = 1000 * 100000000
        invoice = self.fiber1.get_client().new_invoice(
            {
                "amount": hex(invoice_balance),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
                "hash_algorithm": "sha256",
                "udt_type_script": self.get_account_udt_script(
                    self.fiber1.account_private
                ),
            }
        )
        before_channel = self.fiber2.get_client().list_channels({})

        payment = self.fiber2.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        after_channel = self.fiber2.get_client().list_channels({})
        assert (
                int(before_channel["channels"][0]["local_balance"], 16)
                - int(after_channel["channels"][0]["local_balance"], 16)
                == invoice_balance
        )

        # shut down
        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": self.get_account_script(self.Config.ACCOUNT_PRIVATE_1),
                "fee_rate": "0x3FC",
            }
        )
        # todo wait close txx commit
        time.sleep(20)

        after_account1 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber1.account_private)["args"],
        )
        after_account2 = self.udtContract.list_cell(
            self.node.getClient(),
            self.get_account_script(self.fiber1.account_private)["args"],
            self.get_account_script(self.fiber2.account_private)["args"],
        )

        assert after_account1[-1]["balance"] == (1 * 100000000 + invoice_balance)
        assert after_account2[-1]["balance"] == (200000 * 100000000 - invoice_balance)
