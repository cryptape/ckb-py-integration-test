import time

from framework.basic_fiber import FiberTest


class WithTx(FiberTest):

    # FiberTest.debug = True

    def test_with_tx(self):
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
                # "tlc_fee_proportional_millionths": "0x4B0",
            }
        )
        time.sleep(1)
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        payment = self.fiber1.get_client().send_payment(
            {
                "amount": hex(100),
                "target_pubkey": self.fiber2.get_client().node_info()["public_key"],
                "keysend": True,
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"])

        amount = 1
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(amount),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        time.sleep(1)

        channels = self.fiber1.get_client().list_channels(
            {"peer_id": self.fiber2.get_peer_id()}
        )
        N1N2_CHANNEL_ID = channels["channels"][0]["channel_id"]

        # 5. Send payment using the created invoice
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.fiber1.get_client().shutdown_channel(
            {
                "channel_id": N1N2_CHANNEL_ID,
                "close_script": {
                    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
                    "hash_type": "type",
                    "args": self.account1["lock_arg"],
                },
                "fee_rate": "0x3FC",
                "force": True,
            }
        )
        channels = self.fiber1.get_client().list_channels({"include_closed": True})
        self.fiber1.get_client().get_payment({"payment_hash": payment["payment_hash"]})
        time.sleep(5)
        self.fiber2.get_client().send_payment(
            {
                "amount": hex(1),
                "target_pubkey": self.fiber1.get_client().node_info()["public_key"],
                "keysend": True,
            }
        )
        time.sleep(3)
        self.fiber1.stop()
        self.fiber1.start()
        self.node.getClient().generate_epochs("0xf")
