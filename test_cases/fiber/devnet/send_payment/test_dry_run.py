import time

import pytest

from framework.basic_fiber import FiberTest


class TestDryRun(FiberTest):
    """
    test max_fee_amount
    test dry_run
    """

    @pytest.mark.skip("https://github.com/nervosnetwork/fiber/issues/360")
    def test_dry_run(self):
        """
        Returns:
        """
        account_private = self.generate_account(1000)
        self.fiber3 = self.start_new_fiber(account_private)
        self.fiber3.connect_peer(self.fiber2)
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber3.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        invoice = self.fiber3.get_client().new_invoice(
            {
                "amount": hex(100 * 100000000),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        parse_invoice = self.fiber2.get_client().parse_invoice(
            {"invoice": invoice["invoice_address"]}
        )
        payment1 = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
                "dry_run": True,
            }
        )
        print(payment1)
        assert payment1["fee"] == hex(10000000)

        self.wait_invoice_state(self.fiber3, payment1["payment_hash"], "Open")

        with pytest.raises(Exception) as exc_info:
            self.fiber1.get_client().get_payment(
                {"payment_hash": payment1["payment_hash"]}
            )

        expected_error_message = "Payment session not found"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

        with pytest.raises(Exception) as exc_info:
            payment1 = self.fiber1.get_client().send_payment(
                {
                    "invoice": invoice["invoice_address"],
                    "max_fee_amount": payment1["fee"],
                }
            )
        expected_error_message = "no path found"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )
        # use max_fee_amount = dry_run  return fee
        payment1 = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
                "max_fee_amount": payment1["fee"],
            }
        )
        self.wait_payment_state(self.fiber1, payment1["payment_hash"], "Success")

    @pytest.mark.skip(
        "https://github.com/nervosnetwork/fiber/issues/362#issuecomment-2510654848"
    )
    def test_mutil_channel(self):
        """
        node1(500)-node2(0) node2.fee = 2000
        node1(0)-node2(1000) node2.fee = 1000
        Returns:
        """
        account_private = self.generate_account(2000)
        self.fiber3 = self.start_new_fiber(account_private)
        self.fiber3.connect_peer(self.fiber2)
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        # update channel2 fee
        self.fiber2.get_client().update_channel(
            {
                "channel_id": self.fiber1.get_client().list_channels({})["channels"][0][
                    "channel_id"
                ],
                "tlc_fee_proportional_millionths": hex(2000),
            }
        )
        self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber3.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber1.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber2.get_client(), self.fiber1.get_peer_id(), "CHANNEL_READY"
        )
        time.sleep(1)
        payment = self.fiber1.get_client().send_payment(
            {
                "target_pubkey": self.fiber3.get_client().node_info()["public_key"],
                "amount": hex(10 * 100000000),
                "keysend": True,
                "dry_run": True,
            }
        )
        assert payment["fee"] == hex(2000000)
        print("payment:", payment)
