import time

import pytest

from framework.basic_fiber import FiberTest


class TestPaymentHash(FiberTest):

    def test_payment_hash_not_exist(self):
        """
        not exist
        Returns:
        """
        account_private = self.generate_account(1000)
        self.fiber3 = self.start_new_fiber(account_private)
        self.fiber3.connect_peer(self.fiber2)
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber3.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        invoice = self.fiber3.get_client().new_invoice(
            {
                "amount": hex(100 * 100000000),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        parse_invoice = self.fiber2.get_client().parse_invoice(
            {"invoice": invoice["invoice_address"]}
        )
        payment1 = self.fiber1.get_client().send_payment(
            {
                "target_pubkey": parse_invoice["invoice"]["data"]["attrs"][3][
                    "payee_public_key"
                ],
                "currency": parse_invoice["invoice"]["currency"],
                "payment_hash": self.generate_random_preimage(),
                "amount": invoice["invoice"]["amount"],
                # "dry_run": True,
            }
        )
        self.wait_payment_state(self.fiber1, payment1["payment_hash"], "Failed")

    def test_rand_hash_Musig2VerifyError(self):
        account_private = self.generate_account(1000)
        self.fiber3 = self.start_new_fiber(account_private)
        self.fiber3.connect_peer(self.fiber2)
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        self.fiber2.get_client().open_channel(
            {
                "peer_id": self.fiber3.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber3.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        invoice = self.fiber3.get_client().new_invoice(
            {
                "amount": hex(100 * 100000000),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        parse_invoice = self.fiber2.get_client().parse_invoice(
            {"invoice": invoice["invoice_address"]}
        )

        payment1 = self.fiber1.get_client().send_payment(
            {
                "target_pubkey": parse_invoice["invoice"]["data"]["attrs"][3][
                    "payee_public_key"
                ],
                "currency": parse_invoice["invoice"]["currency"],
                "payment_hash": self.generate_random_preimage(),
                "amount": invoice["invoice"]["amount"],
                "dry_run": True,
            }
        )
        payment1 = self.fiber1.get_client().send_payment(
            {
                "target_pubkey": parse_invoice["invoice"]["data"]["attrs"][3][
                    "payee_public_key"
                ],
                "currency": parse_invoice["invoice"]["currency"],
                "payment_hash": self.generate_random_preimage(),
                "amount": invoice["invoice"]["amount"],
                # "dry_run": True,
            }
        )
        self.wait_payment_state(self.fiber1, payment1["payment_hash"], "Failed")
        channels = self.fiber1.get_client().list_channels({})
        assert channels["channels"][0]["state"]["state_name"] == "CHANNEL_READY"
        assert channels["channels"][0]["offered_tlc_balance"] == "0x0"

    def test_paid_hash(self):
        """
        rand hash
        Returns:
        """
        self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(500 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )
        time.sleep(1)
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(1 * 100000000),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_invoice_state(self.fiber2, payment["payment_hash"], "Paid")

        # Payment session already exists
        with pytest.raises(Exception) as exc_info:
            self.fiber1.get_client().send_payment(
                {
                    "invoice": invoice["invoice_address"],
                }
            )
        expected_error_message = "Payment session already exists"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )
