import time
import heapq

from framework.basic_fiber import FiberTest


class FindPath(FiberTest):
    # lowest fee path
    # basic graph path finding

    # FiberTest.debug = True
    # 简单连通图 A->B->C
    # 单向图 A->B->C
    # 环形图 A->B->C->A
    # 多路径图 A->B->D A->C->D
    # 魔方图

    def test_linked_net(self):
        for i in range(1):
            fiber = self.start_new_fiber(self.generate_account(10000))
            fiber.connect_peer(self.fiber1)
            fiber.connect_peer(self.fiber2)
        for i in range(2):
            self.open_channel(
                self.fibers[0], self.fibers[1], 1000 * 100000000, 1000 * 100000000
            )
        self.open_channel(
            self.fibers[0], self.fibers[1], 1000 * 100000000, 1000 * 100000000
        )
        for i in range(2):
            self.open_channel(
                self.fibers[0], self.fibers[1], 10000 * 100000000, 1000 * 100000000
            )
        for i in range(2):
            self.open_channel(
                self.fibers[1], self.fibers[2], 1000 * 100000000, 1000 * 100000000
            )
        self.open_channel(
            self.fibers[1], self.fibers[2], 1000 * 100000000, 1000 * 100000000
        )
        for i in range(2):
            self.open_channel(
                self.fibers[1], self.fibers[2], 1000 * 100000000, 1000 * 100000000
            )

        self.send_payment(self.fibers[0], self.fibers[2], 3000 * 10000000)

    # FiberTest.debug = True

    def test_mul_path(self):
        """
        1. A -> B -> D B(fee= 1000)
        2. A -> C -> D C(fee= 3000)
        3. A -> E ->F -> D E(fee= 1000) F(fee= 1000)
        Returns:
        """
        deploy_hash, deploy_index = self.udtContract.get_deploy_hash_and_index()
        update_config = {
            "ckb_rpc_url": self.node.rpcUrl,
            "fiber_open_channel_auto_accept_min_ckb_funding_amount": "1000000000000000",
            "ckb_udt_whitelist": True,
            "xudt_script_code_hash": self.Contract.get_ckb_contract_codehash(
                deploy_hash, deploy_index, True, self.node.rpcUrl
            ),
            "xudt_cell_deps_tx_hash": deploy_hash,
            "xudt_cell_deps_index": deploy_index,
        }
        for i in range(6):
            fiber = self.start_new_fiber(self.generate_account(1000000), update_config)
            self.fiber2.connect_peer(fiber)
        self.open_channel(
            self.new_fibers[0],
            self.new_fibers[2],
            110 * 100000000,
            110 * 100000000,
            1000,
            3000,
        )
        self.open_channel(
            self.new_fibers[2],
            self.new_fibers[3],
            110 * 100000000,
            110 * 100000000,
            1000,
            1000,
        )
        self.open_channel(
            self.new_fibers[0],
            self.new_fibers[1],
            110 * 100000000,
            110 * 100000000,
            1000,
            2500,
        )
        self.open_channel(
            self.new_fibers[1],
            self.new_fibers[3],
            110 * 100000000,
            110 * 100000000,
            1000,
            1000,
        )
        self.open_channel(
            self.new_fibers[0],
            self.new_fibers[4],
            110 * 100000000,
            110 * 100000000,
            1000,
            1000,
        )
        self.open_channel(
            self.new_fibers[4],
            self.new_fibers[5],
            110 * 100000000,
            110 * 100000000,
            1000,
            1000,
        )
        self.open_channel(
            self.new_fibers[5],
            self.new_fibers[3],
            110 * 100000000,
            110 * 100000000,
            1000,
            1000,
        )

        payment_hash1 = self.send_payment(
            self.new_fibers[0], self.new_fibers[3], 100 * 100000000
        )
        payment_hash2 = self.send_payment(
            self.new_fibers[0], self.new_fibers[3], 100 * 100000000
        )
        payment_hash3 = self.send_payment(
            self.new_fibers[0], self.new_fibers[3], 100 * 100000000
        )
        payment1 = (
            self.new_fibers[0].get_client().get_payment({"payment_hash": payment_hash1})
        )
        payment2 = (
            self.new_fibers[0].get_client().get_payment({"payment_hash": payment_hash2})
        )
        payment3 = (
            self.new_fibers[0].get_client().get_payment({"payment_hash": payment_hash3})
        )
        print("payment1", payment1)
        print("payment2", payment2)
        print("payment3", payment3)

    def send_payment(self, src_fiber, to_fiber, amount, key_send=False):
        if not key_send:
            invoice_address = to_fiber.get_client().new_invoice(
                {
                    "amount": hex(amount),
                    "currency": "Fibd",
                    "description": "test invoice generated by node2",
                    "expiry": "0xe10",
                    "final_cltv": "0x28",
                    "payment_preimage": self.generate_random_preimage(),
                    "hash_algorithm": "sha256",
                }
            )["invoice_address"]
            payment = src_fiber.get_client().send_payment(
                {
                    "invoice": invoice_address,
                    "dry_run": True,
                }
            )
            payment = src_fiber.get_client().send_payment(
                {
                    "invoice": invoice_address,
                }
            )
            self.wait_payment_state(src_fiber, payment["payment_hash"], "Success")
            self.wait_invoice_state(to_fiber, payment["payment_hash"], "Paid")
            return payment["payment_hash"]
        payment = src_fiber.get_client().send_payment(
            {
                "amount": hex(amount),
                "target_pubkey": to_fiber.get_client().node_info()["node_id"],
                "keysend": True,
            }
        )
        self.wait_payment_state(src_fiber, payment["payment_hash"], "Success")
        return payment["payment_hash"]
