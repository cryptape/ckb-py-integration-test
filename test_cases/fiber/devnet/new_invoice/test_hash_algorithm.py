import time

import pytest

from framework.basic_fiber import FiberTest


class TestHashAlgorithm(FiberTest):
    """
    - none
    - sha256
    - ckbhash
    """

    def test_none(self):
        # 1. Open a channel between fiber1 and fiber2
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )
        # 2. Check the channel state to ensure it is ready

        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        # 3. Create a new invoice with a normal amount
        amount = 1
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(amount),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
            }
        )
        time.sleep(1)

        # 4. List channels before sending payment
        before_channel = self.fiber1.get_client().list_channels({})

        # 5. Send payment using the created invoice
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )

        # 6. Verify the payment and invoice states
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        self.wait_invoice_state(self.fiber2, payment["payment_hash"], "Paid")

        # 7. List channels after sending payment
        after_channel = self.fiber1.get_client().list_channels({})

        # 8. Assert the local balance is correctly updated
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            == int(after_channel["channels"][0]["local_balance"], 16) + amount
        )

    def test_sha256(self):
        """
        Test case for normal amount value in invoice.

        Steps:
        1. Open a channel between fiber1 and fiber2.
        2. Check the channel state to ensure it is ready.
        3. Create a new invoice with a normal amount.
        4. Send payment using the created invoice.
        5. Verify the payment and invoice states.
        6. Assert the local balance is correctly updated.

        Returns:
            None
        """
        # 1. Open a channel between fiber1 and fiber2
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )

        # 2. Check the channel state to ensure it is ready
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        # 3. Create a new invoice with a normal amount
        amount = 1
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(amount),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "sha256",
            }
        )
        time.sleep(1)

        # 4. List channels before sending payment
        before_channel = self.fiber1.get_client().list_channels({})

        # 5. Send payment using the created invoice
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )

        # 6. Verify the payment and invoice states
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        self.wait_invoice_state(self.fiber2, payment["payment_hash"], "Paid")

        # 7. List channels after sending payment
        after_channel = self.fiber1.get_client().list_channels({})

        # 8. Assert the local balance is correctly updated
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            == int(after_channel["channels"][0]["local_balance"], 16) + amount
        )

    def test_ckb_hash(self):
        # 1. Open a channel between fiber1 and fiber2
        temporary_channel = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(1000 * 100000000),
                "public": True,
            }
        )

        # 2. Check the channel state to ensure it is ready
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY"
        )

        # 3. Create a new invoice with a normal amount
        amount = 1
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": hex(amount),
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": self.generate_random_preimage(),
                "hash_algorithm": "ckb_hash",
            }
        )
        time.sleep(1)

        # 4. List channels before sending payment
        before_channel = self.fiber1.get_client().list_channels({})

        # 5. Send payment using the created invoice
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )

        # 6. Verify the payment and invoice states
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success")
        self.wait_invoice_state(self.fiber2, payment["payment_hash"], "Paid")

        # 7. List channels after sending payment
        after_channel = self.fiber1.get_client().list_channels({})

        # 8. Assert the local balance is correctly updated
        assert (
            int(before_channel["channels"][0]["local_balance"], 16)
            == int(after_channel["channels"][0]["local_balance"], 16) + amount
        )

    def test_other(self):
        with pytest.raises(Exception) as exc_info:
            self.fiber2.get_client().new_invoice(
                {
                    "amount": hex(1),
                    "currency": "Fibd",
                    "description": "test invoice generated by node2",
                    "expiry": "0xe10",
                    "final_cltv": "0x28",
                    "payment_preimage": self.generate_random_preimage(),
                    "hash_algorithm": "other",
                }
            )
        expected_error_message = "Invalid params"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )
