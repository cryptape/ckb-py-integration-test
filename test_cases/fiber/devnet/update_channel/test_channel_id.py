import time

import pytest

from framework.basic_fiber import FiberTest


class TestChanelId(FiberTest):
    # FiberTest.debug = True

    def test_channel_id_not_exist(self):
        with pytest.raises(Exception) as exc_info:
            self.fiber1.get_client().update_channel(
                {"channel_id": self.generate_random_preimage()}
            )
        expected_error_message = "Messaging failed because channel is closed"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )

    def test_channel_id_exist(self):
        """
        1. fiber3(200) open_channel fiber1(0)
        2. fiber1(200) open_channel fiber2(0)
        3. fiber1 send_payment fiber 2 1 ckb
        4. fiber1 call  update_channel (id,tlc_fee_proportional_millionths:2000) node1<-> node3
        5. fiber3 send_payment fiber2 1 ckb
            手续费1000变为为2000
        6. check update_channel success

        Returns:

        """
        # 1. fiber3(200) open_channel fiber1(0)
        account3_private = self.generate_account(1000)
        self.fiber3 = self.start_new_fiber(account3_private)
        self.fiber3.connect_peer(self.fiber1)
        time.sleep(1)
        self.fiber3.get_client().open_channel(
            {
                "peer_id": self.fiber1.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber3.get_client(), self.fiber1.get_peer_id(), "CHANNEL_READY", 120
        )

        # 2. fiber1(200) open_channel fiber2(0)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # 3. fiber1 send_payment fiber 2 1 ckb
        invoice_balance = hex(1 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
            }
        )
        time.sleep(1)
        before_channel = self.fiber1.get_client().list_channels({})
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success", 120)
        after_channel = self.fiber1.get_client().list_channels({})
        assert int(before_channel["channels"][0]["local_balance"], 16) - int(
            after_channel["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)
        before_channel = self.fiber3.get_client().list_channels({})
        # 4. fiber2 call  update_channel (id,tlc_fee_proportional_millionths)
        tlc_fee_proportional_millionths = 2000
        channels = self.fiber1.get_client().update_channel(
            {
                "channel_id": before_channel["channels"][0]["channel_id"],
                # "enabled": False,
                "tlc_fee_proportional_millionths": hex(tlc_fee_proportional_millionths),
            }
        )
        time.sleep(1)

        # 5. fiber3 send_payment fiber2 1 ckb
        invoice_balance = hex(1 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
            }
        )
        time.sleep(1)
        before_channel31 = self.fiber3.get_client().list_channels({})
        before_channel21 = self.fiber2.get_client().list_channels({})

        payment = self.fiber3.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber3, payment["payment_hash"], "Success", 120)
        after_channel31 = self.fiber3.get_client().list_channels({})
        after_channel21 = self.fiber2.get_client().list_channels({})
        assert int(before_channel31["channels"][0]["local_balance"], 16) - int(
            after_channel31["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16) + int(
            int(invoice_balance, 16) * (tlc_fee_proportional_millionths / 1000000)
        )

        assert int(after_channel21["channels"][0]["local_balance"], 16) - int(
            before_channel21["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)

    def test_channel_id_exist_2(self):
        # 2. fiber1(200) open_channel fiber2(0)
        temporary_channel_id = self.fiber1.get_client().open_channel(
            {
                "peer_id": self.fiber2.get_peer_id(),
                "funding_amount": hex(200 * 100000000),
                "public": True,
            }
        )
        self.wait_for_channel_state(
            self.fiber1.get_client(), self.fiber2.get_peer_id(), "CHANNEL_READY", 120
        )
        # 3. fiber1 send_payment fiber 2 1 ckb
        invoice_balance = hex(1 * 100000000)
        payment_preimage = self.generate_random_preimage()
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
            }
        )
        time.sleep(1)
        before_channel = self.fiber1.get_client().list_channels({})
        payment = self.fiber1.get_client().send_payment(
            {
                "invoice": invoice["invoice_address"],
            }
        )
        self.wait_payment_state(self.fiber1, payment["payment_hash"], "Success", 120)
        after_channel = self.fiber1.get_client().list_channels({})
        assert int(before_channel["channels"][0]["local_balance"], 16) - int(
            after_channel["channels"][0]["local_balance"], 16
        ) == int(invoice_balance, 16)
        before_channel = self.fiber2.get_client().list_channels({})
        # 4. fiber2 call  update_channel (id,tlc_fee_proportional_millionths)
        tlc_max_value = 100
        channels = self.fiber2.get_client().update_channel(
            {
                "channel_id": before_channel["channels"][0]["channel_id"],
                # "enabled": False,
                "tlc_maximum_value": hex(tlc_max_value),
            }
        )
        time.sleep(1)

        # 5. fiber3 send_payment fiber2 1 ckb
        invoice_balance = hex(100)
        payment_preimage = self.generate_random_preimage()
        invoice = self.fiber2.get_client().new_invoice(
            {
                "amount": invoice_balance,
                "currency": "Fibd",
                "description": "test invoice generated by node2",
                "expiry": "0xe10",
                "final_cltv": "0x28",
                "payment_preimage": payment_preimage,
            }
        )
        time.sleep(1)
        before_channel21 = self.fiber2.get_client().list_channels({})
        with pytest.raises(Exception) as exc_info:
            payment = self.fiber1.get_client().send_payment(
                {
                    "invoice": invoice["invoice_address"],
                }
            )
        expected_error_message = "Failed to build route"
        assert expected_error_message in exc_info.value.args[0], (
            f"Expected substring '{expected_error_message}' "
            f"not found in actual string '{exc_info.value.args[0]}'"
        )
